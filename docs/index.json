[{"content":"As far back as 1972, Norway had a referendum on whether or not to join the European Union (EU). For reference, this was so far back that the EU didn\u0026rsquo;t even exist yet. It was only the Economic European Community (EEC) back then. Narrowly, the population voted about 53% nay. There was another referendum, a lot more recently, in 1994. That time, it was even more narrow, with 52% voting nay. Sweden, which had referendum at around the same time, voted 53% yay instead, and became a member of the EU. This raises a perfectly obvious question: was the Norwegian public wise in these two landmark decisions? Clearly it is not a cut-and-dry issue, as all that decided the outcome was only about 100,000 people. If 100,000 more people were convinced that EU would be to Norway\u0026rsquo;s benefit \u0026ndash; rather than to its detriment \u0026ndash; Norway would have been an EU member in either 1972 or 1994. Let\u0026rsquo;s examine this more closely.\nFirst of all, let\u0026rsquo;s identify what motivated the decisions in either referendum of the general public of Norway. According to Statistics Norway (Statistisk Sentralbyrå), the key fear of those voting nay in either referendum was loss of autonomy. Even back in 1972, when the EU was not a fully political union yet, 81% of those voting against EU membership cited this as a key factor in their decision. Even bigger portion still simply did not see any benefits, at 84%. Interestingly, even of those who voted positively for EU membership, 64% feared that EU membership would invite entry of foreign workers and foreign interests into Norway. In other words, even those who were receptive to EU membership were aware that some kind of compromises were pending, but saw that the advantages outweighed the perceived negatives.\nAnother factor for the outcome of both referendums was the rural-urban divide, with the rural Norway overwhelmingly voting against EU membership. In summary, key fear of the rural people was that piling Brussels on top of Oslo as an authority would overwhelm the \u0026lsquo;rural class\u0026rsquo; of people, overriding their every decision or wish. As someone from Mandal who prefers rural life, I can resonate with this fear, even if I still think it was misplaced. In my experience, Brussels or not, the government is going to have its way with you.\nResults of 1994 European Union referendums in Norway and Sweden. Statistics based on Statistics Norway.\nThese voter motivations more or less align with what I know from Norwegians, as someone who lived there my whole life. Throughout many conversations about Norway\u0026rsquo;s status in the world, I have repeatedly heard the following two words come up: independence (uavhengighet) and liberty (frihet). For example, why should Norway categorically ban imports of all potatoes forever? Because Norwegian farmers need to be free from foreign intervention and tyranny of cheap competition. In one particular case, I even heard the argument that Norwegians are uniquely the best people in the world when it comes to not wasting any food from grocery1, such as Coop or REMA 1000. According to that person, inviting competitors from abroad, such as LIDL or Aldi, would undermine this culture of saving food from waste. As a consequence, cultural independence and liberty of Norway would be infringed. Basically, the idea of \u0026lsquo;independence and liberty\u0026rsquo; permeates the entire public conscience when it comes to foreign policy.\nBut that was the situation as seen by the general public of Norway. Let\u0026rsquo;s move onto the essential questions regarding the reality of Norway\u0026rsquo;s current situation as a non-EU member. What does Norway actually get out of not being in the EU?\nIt does not take much review to conclude that Norway is forced to play smart politics if it is to exist in Europe outside of the EU. The cornerstone of this strategy is the European Economic Area (EEA) agreement (EØS-avtalen), a deal that grants Norway access to the EU\u0026rsquo;s single market. This is, on the surface, the best of both worlds. Norway gets to trade freely with its largest partners, while remaining, officially, the master of its own house. But this arrangement has given rise to a uniquely Norwegian political problem, often described with the pejorative term fax democracy2. The term illustrates the reality of the situation: Norway receives laws from Brussels, as if by fax, and is obligated to implement them into its own legal code, all without (usually) having a single minister, representative, or even a junior aide at the table where those laws were drafted and voted upon.\nThis is not a trivial matter of conforming to a few trade standards. By some estimates, Norway has adopted roughly three-quarters of all EU legislation through the EEA agreement. This has led to the profound irony that in its quest for \u0026lsquo;independence,\u0026rsquo; Norway has arguably surrendered more legislative power than it would have as a full member. As a member, it would have voting rights, the power of veto on key issues, and a seat in the European Parliament to shape the very laws it now passively accepts. On top of this, Norway pays hundreds of millions of euros to the EU each year for this market access; a fee without without representation. While the nay side can correctly claim victory in protecting key sectors like agriculture and fisheries from direct EU control, one must ask if the trade-off was worth it. Has Norway truly protected its independence and liberty, or has it simply exchanged a seat at the table for a stool in the hallway?\nOf course, critics of this view have valid rebuttals. They will argue that the quarter of EU legislation Norway doesn\u0026rsquo;t adopt makes all the difference, particularly for cherished industries like fisheries and farming. They might also claim that Norway retains crucial \u0026lsquo;wiggle room\u0026rsquo; in how it implements the laws it does accept. And they are not wrong. These exceptions and implementation details are significant. Yet, to focus on them is to miss the forest for the trees. The true cost of Norway’s arrangement isn\u0026rsquo;t found in the fine print of EEA directives, but in its silent shackles on the world stage.\nWhat are those shackles? To understand, consider Hungary under Viktor Orbán. Now, one can vehemently disagree with Orbán\u0026rsquo;s politics \u0026ndash; as many in Norway and across Europe do \u0026ndash; but it is impossible to deny his effectiveness at using EU membership as a tool for his own national agenda. From a position of full membership, Orbán has repeatedly shaped, delayed, or outright blocked EU-wide decisions until his demands were met. He has used Hungary\u0026rsquo;s veto power as a powerful lever to extract concessions and advance his vision. Hungary does not even need powerful resources like oil and gas, as Orbán has a voice in the EU Council, and he uses it. For example:\nIn January 2025, Orbán linked his support for extending EU sanctions on Russia to Ukraine reopening the transit pipeline for Russian gas. Despite Hungary holding the rotating EU Council presidency, Orbán traveled to Moscow in July 2024 to meet Vladimir Putin, without any EU mandate. EU leaders rebuked him for supposed appeasement and stressed he did not represent the bloc’s foreign policy position At a summer event in July 2025, Orbán warned he would torpedo the EU’s next seven-year budget unless Brussels unlocked billions in cohesion funds suspended over rule-of-law concerns. His ultimatum highlighted his willingness to use Hungary’s unanimity vote as leverage. Viktor Orbán (left) meeting Vladimir Putin (right). From BBC News\nNorway, in contrast, has no such lever. When the EU formulates a common foreign policy on everything from climate change to relations with Russia or China, Norway can only watch from the sidelines. It cannot play the spoiler, build a blocking coalition, or anything of the sort. As an economically ponderous petro-state, Norway definitely cannot leverage oil and gas. Wielding its oil and gas reserves as a political weapon, in the style of an embargo, is simply not in the nation\u0026rsquo;s political DNA. The Norwegian television thriller Occupied (Okkupert) vividly imagines the disastrous outcome if Norway were to pursue such a bellicose foreign policy. A nation of five million people, however wealthy, would be swiftly brought to its knees by giants like the EU, the US, or China.\nPut another way, one could think back to the times Julius Caesar. Before he became emperor, he invaded Gaul and burnt its civilisation down to the ground. Despite being a fairly advanced civilisation, with fearsome warriors, the Gauls stood little chance against the much-better organised and powerful Roman Legions. Very little could have been done to prevent Gaul\u0026rsquo;s demise, but one thing that absolutely would have stopped all of Caesar\u0026rsquo;s ambitions would be simple: joining the Roman Republic.\nLuckily, the EU is nowhere near as fearsome as Julius Caesar and his Legions, but the same principle applies in Norway\u0026rsquo;s situation. The point also isn\u0026rsquo;t to advocate for Norway to lead an aggressive foreign policy, where they threaten everyone with everything, including an oil embargo and the kitchen sink, if they don\u0026rsquo;t get their way. Current Norwegian foreign policy is more or less smart, even without EU in the picture. What is important to know, however, is that the current foreign policy isn\u0026rsquo;t implemented just because the Norwegian people want it: they have to implement it, lest they face seriously unpleasant consequences. Is this not by definition lack of independence and liberty?\nFor fifty years, this trade-off may have seemed acceptable. Norway\u0026rsquo;s immense oil wealth and the stability of the post-Cold War era created a comfortable buffer, making true political engagement feel optional. But the world is changing. With the USA\u0026rsquo;s suicidal foreign policy alienating European allies and the geopolitical ground shifting under everyone\u0026rsquo;s feet, the idea of standing alone is starting to look less like a proud choice and more like a dangerous vulnerability. Recent polls and analyses suggest that Norwegians are beginning to notice.\nThe core of the Norwegian dilemma has never been about paying fees to Brussels or the regulation of potatoes. It has always been about what self-determination is. The referendums of 1972 and 1994 answered the question for their time, choosing an ideal of liberty defined by separation; between rural and urban, and Oslo and Brussels. The question now is whether that definition still holds. In the turbulent decade to come, real independence may not be found in isolationism, but in the strength, influence, and security that comes from having a seat at the table. Only time will tell if a new generation of Norwegians will be forced to ask themselves the same question their parents and grandparents did, and whether they will arrive at a different answer.\nAs an aside, this is completely untrue. 450,000 tonnes of food is wasted every year across Norway.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nThis article actually argues against the point I am making, but I thought I would include it to offer fair and nuanced representation of EU critics as it relates to Norway.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://maxwelljensen.eu/posts/norway_vs_eu/","summary":"\u003cp\u003eAs far back as 1972, Norway had a referendum on whether or not to join the\nEuropean Union (EU). For reference, this was so far back that the EU didn\u0026rsquo;t\neven exist yet. It was only the Economic European Community (EEC) back then.\nNarrowly, the population voted about 53% nay. There was another referendum, a\nlot more recently, in 1994. That time, it was even more narrow, with 52% voting\nnay. Sweden, which had referendum at around the same time, voted 53% yay\ninstead, and became a member of the EU. This raises a perfectly obvious\nquestion: \u003cstrong\u003ewas the Norwegian public wise in these two landmark decisions?\u003c/strong\u003e\nClearly it is not a cut-and-dry issue, as all that decided the outcome was only\nabout 100,000 people. If 100,000 more people were convinced that EU would be to\nNorway\u0026rsquo;s benefit \u0026ndash; rather than to its detriment \u0026ndash; Norway would have been an\nEU member in either 1972 or 1994. Let\u0026rsquo;s examine this more closely.\u003c/p\u003e","title":"Norway vs. EU: Shooting Itself in the Foot?"},{"content":"My name is Maxwell Jensen. I was born and raised in Norway, but my story begins in Poland. My father was a naval officer from Gdańsk who sought asylum in Norway in 1986, and my mother immigrated from Zambrów in 1996.\nThe goal here is to share some insights that might be relevant to Norwegians, or really, anyone who finds multicultural exchanges interesting. We all know we live in a world of global exchange \u0026ndash; not just of goods, but of ideas and culture. With this short essay, I hope to offer some insights and constructive criticism that everyone can use to expand their worldview. While I don\u0026rsquo;t believe that simply importing people of fundamentally incompatible cultures constitutes a valid social policy, I do believe every culture offers at least one thing that can widen our perception of the world for the better. And let me be clear, this is a two-way street: my life in Norway has had a formative, profoundly positive impact on how I view the world, which I will get into later.\nIf we don\u0026rsquo;t open up our minds \u0026ndash; or at least give a cursory glance \u0026ndash; to how other people do things, we might end up like the Americans. Notice how Americans enjoy films, but generally only if they are made in Hollywood. If a film is set in a foreign place, it\u0026rsquo;s almost always through the lens of an American protagonist. Even one of their most popular films set in Shogunate Japan is about Tom Cruise as a samurai. This insularity can have amusing consequences, like when the New York Stock Exchange incorrectly hoisted the Swiss flag to announce Spotify\u0026rsquo;s listing \u0026ndash; an error made by people who likely spent more on their education than you spent on your house. You get the idea.\nNow, is that such a big issue? Actually, yes. An insular society can develop some unhealthy blind spots. For instance, a 2019 Pew Research Center study showed that many Americans believe any form of government intervention in the social sphere would undermine democracy. Both those who view \u0026ldquo;socialism\u0026rdquo; negatively and those who view it positively in the USA seem to understand the term only through brief history lessons about the Soviet Union and some headlines about Venezuela. It’s easy to see how simply exposing oneself to foreign cultures, even through films, would dispel such an ill-conceived and almost childishly simple understanding of basic concepts. A few films about Europe \u0026ndash; not through Tom Cruise, but actual Europeans \u0026ndash; would quickly make them understand that, no, we are not \u0026ldquo;socialist\u0026rdquo; countries in that sense. It is no wonder there is so much misery and confusion in the USA when people simply don\u0026rsquo;t know any better.\nCulturally and socially, Norway is not in such a dire state, but that doesn\u0026rsquo;t mean there isn\u0026rsquo;t room for improvement, or that Norwegians don\u0026rsquo;t live in some kind of bubble. Ultimately, we all do. It\u0026rsquo;s only a matter of extent. By no means do I consider myself some learnt world traveler; I speak only three languages and have never travelled outside of Europe.\nThere are many reasons why I decided to move to Poland. Not all of them are related to the cultural or political situation in Norway, but they are a big factor. They are too numerous to list here, so I will focus on the most relevant.\nWhy did I move to Poland? Let\u0026rsquo;s start with a simple, economic reason that everyone can understand: the real estate situation in Norway. For my generation, it is, to put it bluntly, absurd beyond belief. As a result of the 2008 mortgage crisis, Norway implemented extreme austerity measures that should have been lifted years ago. The biggest of these is the limitation of a mortgage to five times your annual income. This was a reasonable measure in the wake of the crisis, but after more than a decade, it has resulted in a crippled real estate market.\nFrom Bloomberg\nBecause of this extremely tight mortgaging limit, companies were forced to build only the housing people could afford within that narrow margin. Five times your annual income is not a lot. Combine that with a fragile fiat currency brought to its knees by a regional conflict or a US presidential election, overall claustrophobic economic regulation discouraging foreign investment, and you have a real estate nightmare on your hands. Even if the government lifts this limit, it will take at least a decade for the market to recover as prices will shoot up for the foreseeable future.\nConsidering I am 29 years old, I am not waiting until I am nearing retirement before I have a chance of applying for a mortgage on a regular house. And no, my wife is not going to be forced to work for a mortgage. This led me to a startling thought: if a medieval peasant six centuries ago could afford a place to live \u0026ndash; working as little as 120 days a year \u0026ndash; then I should be able to afford a decent house with a regular job in the 21st century. Nobody is going to convince me this is normal. Mortgaging in the first place is an aberration, a deep perversion of modern economics. The Catholic Church1 expressly forbids usury, as it is a sin. This isn\u0026rsquo;t exclusive to Norway, of course, but here the situation is exceptionally bad for my generation. The fact that dual income is an essential prerequisite should cause far more outrage than it does.\nPoland was the only country in Europe that had economic growth during the 2008 crisis. Its real estate situation is not ideal either, thanks to global inflation and other developments, but it remains sane. There are no extreme austerity measures limiting your mortgaging possibilities. You can afford a mortgage with one income. For this reason alone, I struggled to see a future in Norway.\nThis has wider personal ramifications. Attracting a suitable spouse becomes immediately more difficult if you do not have a house, at least in a country like Norway where two-generation households are the norm. In many other countries, like Poland and Spain, multi-generation households are common. Having your parents in the house with your kids has immense benefits. Daycares in Norway are necessary only because both parents are forced by the perverted economy to work, and there are no other adults in the house to take care of the children. This isn\u0026rsquo;t just about necessity; it\u0026rsquo;s a different social model. Why should a stranger take care of your children? Food for thought.\nOf course, there is more to life than economics. I do not live by work, or how much cool stuff I can buy on AliExpress, but I thought I would start with something that \u0026ndash; at least I think \u0026ndash; should be the most readily digestible for the common reader. Let\u0026rsquo;s move onto more meaningful, important topics. However, I will have to compress my statements significantly, otherwise I would be writing a book, not an Internet article. Bear that in mind, in case the following statements feel superficial or incomplete.\nPerhaps the easiest way to see the difference between Polish and Norwegian culture is observing the way 17th May Constitution Day in Norway is celebrated compared to the 11th November Independence Day in Poland. Constitution Day in Norway feels more like a birthday, whereas Independence Day in Poland is more like a funeral. Somebody from Norway attending an Independence Day march in Poland might be very surprised by this, until you remember that the Polish state\u0026rsquo;s sovereignty was built on blood and sacrifice. Hundreds of thousands of young men had to sacrifice themselves so that today we can be free. The Polish Constitution is written in blood of my great-grandfathers.\nMeanwhile, with the way Norwegians celebrate Constitution Day, you would think the Norwegian Constitution was written by Coca-Cola. My intention is not to degrade the significance of the Norwegian Constitution, of course, but the celebrations are distinctly more upbeat than in Poland. This is very interesting, because Norwegian independence from Sweden in 1905 could have easily been very bloody. In fact, it is one of the things that sort of started driving me nuts when I learned of it, back when I was doing my hunter\u0026rsquo;s licence in 2023: Norwegians in the 19th century were armed to the teeth. This was the case in most of Europe, but especially Norway. The reason why Sweden didn\u0026rsquo;t invade is not because everyone in Scandinavia was oh-so-polite, but because the quintessential hobby of nearly all Norwegian men was sharpshooting. If Sweden were to invade Norway, it would be a protracted military nightmare where every window and treeline could hide a crack shot. Sure, Swedes on the general did not want war, but when has public opinion ever stopped pointless bloodshed? In other words, the Norwegian Constitution could have also been easily written in blood.\nPhoto of the Langseth shooting club from the 1950s. Taken from the digital museum of Museene i Akershus.\nAt the same time, I have almost never heard about this from any Norwegians I have been with. The old Norwegian gun culture is fascinating. One of the retired gunsmiths I spoke with said how just 30-40 years ago it was quite normal for young teenagers to carry hunting rifles in public. It did not cause any alarm. Nobody called the police to summon a SWAT team to the location. Why would it? There is nothing wrong with weapons, only people that may abuse them.\nEven today we still have Switzerland and Czechia as some of the most heavily armed nations on the planet, which do not have any more serious problems with firearms-related criminality than Germany or Norway. Yet, despite this, in a lamentable way, Norwegians allow their culture to be infected with hysteria from media and political talking points originating in the USA. My hunting instructor told me how people regularly summon the police when they hear gunfire in the nearby forest, only for the SWAT team to find \u0026ndash; to nobody\u0026rsquo;s surprise \u0026ndash; a hunter who was performing normal hunting-related activities in the forest.\nThe point here isn\u0026rsquo;t legislation or morality surrounding guns. My point here is to highlight the symptom of a deeper cultural sickness. It\u0026rsquo;s not something exclusive to Norway, of course. Poland to some extent also suffers from this, but I will get to that.\nThe image of a SWAT team descending on a lone Norwegian hunter is the perfect metaphor for a society that has become afraid of its own shadow. The farmer-sharpshooter who once guaranteed the nation\u0026rsquo;s sovereignty has been replaced by a citizen who is terrified by the very tools that secured his freedom. This citizen no longer trusts his traditional roots, or even himself. Norwegians have forgotten many aspects of their great culture. As cold as it is to say, a large chunk of Norwegian society has transformed from intrepid opportunity-seizing vikings, to largely risk-averse people of the modern world who freak out over hearing a bang in the forest.\nThe modern Norwegian tradition of rolling up to your 2,000,000 kr hytte, in a brand new Tesla on a neat access road, with tap water and electricity does not have the same ring to it.\nIn Poland, a different instinct prevails. A history of being betrayed, occupied, and erased from the map has taught Poles a healthy skepticism towards entrusting their safety entirely to outside forces, including their own state. Self-reliance is not a hobby; it’s a deeply ingrained historical necessity. The idea of calling an armed response team because you heard a hunter in the woods would be met with ridicule, because the forest and the hunter are still understood as normal parts of the landscape of life. Granted that Poles still have a somewhat irrational aversion to firearms, but I digress.\nThis allergy to risk, this outsourcing of responsibility, doesn\u0026rsquo;t stop with guns. It seeps into everything. It\u0026rsquo;s in the way children of Norway are raised in sanitised, bubble-wrapped environments, the way social discourse demands absolute conformity to avoid offence or radical changes, and the way the state is expected to provide a safety net for every poor decision. It is the slow, comfortable march towards a society of dependents, and it was a future I could not see myself in. I still held out hope that this would change, but it didn\u0026rsquo;t. If anything, it has become far worse after I resettled.\nIs Poland a super Catholic and traditional society amidst a hyper-liberal Europe? Some people would like you to believe that, but this is not true at all. Modernity has also come to Poland. With a dramatic increase in affluence \u0026ndash; possibly exceeding that of Norway as of 2025 \u0026ndash; Poles have also become drunk on modern convenience and ideals. Where before God and the Vatican was the binding glue of society, these days around Poles are largely religious only on Sunday Mass. Even then, it is up for debate how many attendees actually pay attention to the worship. Just the same as in other European countries, clothes that would have been unthinkable on an adult woman 20 years ago are now the norm for 13-year-old girls today.\nSo why do I care? What has tangibly changed in my situation, if Poland is slowly heading towards the same degree of liberalisation and ways of thinking as Norway? The answer is about trajectory and foundation. It’s one thing to be on a moving train. It’s another thing entirely to know where the train started and how fast it’s going.\nNorway’s train left the station of deep-rooted tradition long before I was born. It has been moving at full speed for 50 years, fuelled by oil wealth and insulated from the shocks that force a society to remember what matters. The journey has been so smooth for so long that the destination \u0026ndash; a society of comfortable, risk-averse dependents \u0026ndash; is not just in sight, it\u0026rsquo;s the next stop. The cultural battle is, for the most part, over. The consensus has been set. I hope I am wrong in this.\nPoland’s train just left the station. For half a century, it was stuck behind the Iron Curtain, a forced immobility that, funnily enough, preserved much of its cultural foundation. The historical memory of hardship is still fresh. The family unit is still the undisputed centre of life. Religion, even if practised with less fervour, still provides a moral bedrock that is simply absent in Scandinavia.\nMemory of those from my home town, who have given their lives for the liberation of Poland. Photo by Zambrow.org\nSo yes, Poland is liberalising. Yes, it is wrestling with the same demons of modernity. But the crucial difference is that here, it is still a wrestle. The battle is still raging. In Poland, tradition is not a museum piece; it\u0026rsquo;s an active, powerful force in the public square. The hundreds of thousands men who perished in battle are real; they move people, even if jaded by modernity. You have a choice. You can choose to live in a community that still holds to older values. You can build a life, raise a family, and find allies who believe in the same things you do. You are a participant in a living debate.\nIn Norway, that debate feels finished. The ship has sailed, and anyone who questions its direction is treated as if they want to sink it; as if they are extremists or radicals. In Poland, there are still people arguing about the map. I would rather be in a society that is still arguing about its soul than in one that has already parted with it for comfort and safety. That, tangibly, is what has changed for me. I have exchanged comfortable consensus for a meaningful conflict.\nThere\u0026rsquo;s a million and one more things that I could have written about here, such as:\nThe continual demonisation of investors and entrepreneurs by the ruling politicians, for reasons that still remain entirely unknown. How the government doubled down on highest taxation in the world despite having a budget surplus equal to 14% of its GDP in 2024. Again, for reasons unknown. How the railway network has shrunk since 1945. However, this would be just rehashing the same tired point about economics and standards of living. Both of those topics are, in the grand scheme of things, fleeting and boring. This is why I choose to focus more on the intangible, incalculable things that people care about more: culture and tradition.\nMy intention is not to be polemic; to spit on Norway and its culture. Quite on the contrary, I am writing what I am writing because I am frustrated with how short Norwegians sell themselves. They can be so much more. If Norway at one point had the second-largest merchant marine in the world, why can\u0026rsquo;t they do it again? The spark is just not there anymore, yet it feels like I am the only one who takes this seriously. It\u0026rsquo;s not like I am trying to do backseat quarterbacking either: while I might not be in Norway anymore, I am most definitely going to work according to the Norwegian work ethic. I will advocate for labour unions if given the opportunity. If I see a business opportunity, I will seize it, as my host nation ancestors have done. For treating my cancer in 2019 through its public medical system, I have nothing but gratefulness for my host nation, so it is the least that I can do in return.\nThat gratitude is not platitude. It is a debt I intend to repay. This, then, is the multicultural exchange I spoke of at the beginning. It is not about abandoning one home for another, but about carrying the best of one\u0026rsquo;s heritage into the arms of another. I left Norway not because I hate it, but because I love what it once was, and what it could be again, too much to stand by and watch that spirit fade. Ultimately, my move to Poland was not an act of rejection, but an act of preservation \u0026ndash; an attempt to keep that intrepid Norwegian spark alive, even if I had to carry the torch to another shore.\nTo be clear, I am not Roman Catholic.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://maxwelljensen.eu/posts/why_i_left/","summary":"\u003cp\u003eMy name is Maxwell Jensen. I was born and raised in Norway, but my story begins\nin Poland. My father was a naval officer from Gdańsk who sought asylum in\nNorway in 1986, and my mother immigrated from Zambrów in 1996.\u003c/p\u003e\n\u003cp\u003eThe goal here is to share some insights that might be relevant to Norwegians,\nor really, anyone who finds multicultural exchanges interesting. We all know we\nlive in a world of global exchange \u0026ndash; not just of goods, but of ideas and\nculture. With this short essay, I hope to offer some insights and constructive\ncriticism that everyone can use to expand their worldview. While I don\u0026rsquo;t\nbelieve that simply importing people of fundamentally incompatible cultures\nconstitutes a valid social policy, I do believe every culture offers \u003cem\u003eat least\none thing\u003c/em\u003e that can widen our perception of the world for the better. And let\nme be clear, this is a two-way street: my life in Norway has had a formative,\nprofoundly positive impact on how I view the world, which I will get into\nlater.\u003c/p\u003e","title":"My Life in Norway, and Why I Moved On"},{"content":"Fedora is an awesome Linux distribution, but what makes it even more awesome is the fact that you can run AI on it fairly easily. That is, if you know how to run it first, which is the hard part. This article goes through some technical details of getting certain Fedora-specific problems out of the way. Since most Linux guides regarding AI cater to Debian-based or Arch-based systems, I have found very little information on how to get some AI tools running on Fedora.\nTips my AI-generated fedora in your direction.\nAs a proud Fedora user, I will share the knowledge I gathered. My computer setup:\nOS: Fedora 41 GPU: Radeon RX 6700 XT CPU: AMD Ryzen 7 2700X RAM: 32 GB Using this, I managed to run:\nLostRuins/koboldcpp/ (LLM; text generation) YellowRoseCx/koboldcpp-rocm (LLM) oobabooga/text-generation-webui (LLM) comfyanonymous/ComfyUI (Diffusion; image generation) Getting the common dependencies There are some dependencies you will need, regardless of what kind of AI you are going to use. Thankfully, Fedora does actually have all of them available in the repositories, but they are not obvious to find. The main source of information on those dependencies is this fairly obscure Fedora Wiki page.\nROCm ROCm (short for Radeon Open Compute) is AMD\u0026rsquo;s poor answer to NVIDIA\u0026rsquo;s CUDA technology. It\u0026rsquo;s an open-source software platform designed to support high-performance computing (HPC) and artificial intelligence (AI) workloads on AMD GPUs. It includes a bunch of drivers, development tools, and APIs, but those are highly disorganised in comparison to CUDA.\nThe main piece of information to know is that the range of hardware supported by ROCm is extremely narrow. NVIDIA GPUs from 2013 or even 2011 can be used to do LLM inference. The same can\u0026rsquo;t be said about AMD GPUs. It\u0026rsquo;s only recently that it started officially supporting RDNA 2.0 cards like the RX 6700 XT. Here\u0026rsquo;s a full list of cards that are officially supported by ROCm. It\u0026rsquo;s not an impressive list. There are many unofficially supported devices. I\u0026rsquo;ve read posts on the Internet about people getting RX 580s to work with ROCm, but don\u0026rsquo;t hold your breath. ROCm is not even supported on Windows at all, at least in practice. AMD users on Windows need to use workarounds like DirectML instead.\nThat being said, you want to use ROCm at every available opportunity, as it is the fastest backend to use with AMD GPUs for any AI workload.\nShould you have an AMD GPU architecture supported by ROCm, you will need to install the following packages:\nsudo dnf install rocm-hip rocm-hip-devel rocm-hipblas rocm-hipblas-devel rocm-llvm-devel rocminfo hipblas hipblas-devel hipcc While it is not strictly necessary to install the development (*-devel) versions of these packages, practically all AI tools on Linux will require you to compile the tools from source if you are using ROCm. Therefore, you might as well get the full suite.\nTo verify ROCm functionality on your system, run rocminfo. You should get output like this:\nLong log ROCm module is loaded ===================== HSA System Attributes ===================== Runtime Version: 1.1 Runtime Ext Version: 1.6 System Timestamp Freq.: 1000.000000MHz Sig. Max Wait Duration: 18446744073709551615 (0xFFFFFFFFFFFFFFFF) (timestamp count) Machine Model: LARGE System Endianness: LITTLE Mwaitx: DISABLED DMAbuf Support: YES ========== HSA Agents ========== ******* Agent 1 ******* Name: AMD Ryzen 7 2700X Eight-Core Processor Uuid: CPU-XX Marketing Name: AMD Ryzen 7 2700X Eight-Core Processor Vendor Name: CPU Feature: None specified Profile: FULL_PROFILE Float Round Mode: NEAR Max Queue Number: 0(0x0) Queue Min Size: 0(0x0) Queue Max Size: 0(0x0) Queue Type: MULTI Node: 0 Device Type: CPU Cache Info: L1: 32768(0x8000) KB Chip ID: 0(0x0) ASIC Revision: 0(0x0) Cacheline Size: 64(0x40) Max Clock Freq. (MHz): 3700 BDFID: 0 Internal Node ID: 0 Compute Unit: 16 SIMDs per CU: 0 Shader Engines: 0 Shader Arrs. per Eng.: 0 WatchPts on Addr. Ranges:1 Memory Properties: Features: None Pool Info: Pool 1 Segment: GLOBAL; FLAGS: FINE GRAINED Size: 32780072(0x1f42f28) KB Allocatable: TRUE Alloc Granule: 4KB Alloc Recommended Granule:4KB Alloc Alignment: 4KB Accessible by all: TRUE Pool 2 Segment: GLOBAL; FLAGS: KERNARG, FINE GRAINED Size: 32780072(0x1f42f28) KB Allocatable: TRUE Alloc Granule: 4KB Alloc Recommended Granule:4KB Alloc Alignment: 4KB Accessible by all: TRUE Pool 3 Segment: GLOBAL; FLAGS: COARSE GRAINED Size: 32780072(0x1f42f28) KB Allocatable: TRUE Alloc Granule: 4KB Alloc Recommended Granule:4KB Alloc Alignment: 4KB Accessible by all: TRUE ISA Info: ******* Agent 2 ******* Name: gfx1031 Uuid: GPU-XX Marketing Name: AMD Radeon RX 6700 XT Vendor Name: AMD Feature: KERNEL_DISPATCH Profile: BASE_PROFILE Float Round Mode: NEAR Max Queue Number: 128(0x80) Queue Min Size: 64(0x40) Queue Max Size: 131072(0x20000) Queue Type: MULTI Node: 1 Device Type: GPU Cache Info: L1: 16(0x10) KB L2: 3072(0xc00) KB L3: 98304(0x18000) KB Chip ID: 29663(0x73df) ASIC Revision: 0(0x0) Cacheline Size: 128(0x80) Max Clock Freq. (MHz): 2725 BDFID: 2048 Internal Node ID: 1 Compute Unit: 40 SIMDs per CU: 2 Shader Engines: 2 Shader Arrs. per Eng.: 2 WatchPts on Addr. Ranges:4 Coherent Host Access: FALSE Memory Properties: Features: KERNEL_DISPATCH Fast F16 Operation: TRUE Wavefront Size: 32(0x20) Workgroup Max Size: 1024(0x400) Workgroup Max Size per Dimension: x 1024(0x400) y 1024(0x400) z 1024(0x400) Max Waves Per CU: 32(0x20) Max Work-item Per CU: 1024(0x400) Grid Max Size: 4294967295(0xffffffff) Grid Max Size per Dimension: x 4294967295(0xffffffff) y 4294967295(0xffffffff) z 4294967295(0xffffffff) Max fbarriers/Workgrp: 32 Packet Processor uCode:: 122 SDMA engine uCode:: 80 IOMMU Support:: None Pool Info: Pool 1 Segment: GLOBAL; FLAGS: COARSE GRAINED Size: 12566528(0xbfc000) KB Allocatable: TRUE Alloc Granule: 4KB Alloc Recommended Granule:2048KB Alloc Alignment: 4KB Accessible by all: FALSE Pool 2 Segment: GLOBAL; FLAGS: EXTENDED FINE GRAINED Size: 12566528(0xbfc000) KB Allocatable: TRUE Alloc Granule: 4KB Alloc Recommended Granule:2048KB Alloc Alignment: 4KB Accessible by all: FALSE Pool 3 Segment: GROUP Size: 64(0x40) KB Allocatable: FALSE Alloc Granule: 0KB Alloc Recommended Granule:0KB Alloc Alignment: 0KB Accessible by all: FALSE ISA Info: ISA 1 Name: amdgcn-amd-amdhsa--gfx1031 Machine Models: HSA_MACHINE_MODEL_LARGE Profiles: HSA_PROFILE_BASE Default Rounding Mode: NEAR Default Rounding Mode: NEAR Fast f16: TRUE Workgroup Max Size: 1024(0x400) Workgroup Max Size per Dimension: x 1024(0x400) y 1024(0x400) z 1024(0x400) Grid Max Size: 4294967295(0xffffffff) Grid Max Size per Dimension: x 4294967295(0xffffffff) y 4294967295(0xffffffff) z 4294967295(0xffffffff) FBarrier Max Size: 32 *** Done *** If you get mostly empty output, or it lists only your CPU as an agent, it means that your GPU is not recognised as a ROCm platform. You can check and see if there is unofficial support somewhere, but it is unlikely.\nPriming ROCm on Fedora One last thing about ROCm that needs to be addressed on Fedora is that Fedora packages use directories that are not standard according to the ROCm project. This can and likely will cause problems when trying to set up AI tools, without it being obvious why.\nBy standard, ROCm development files come with copies of LLVM tools like clang and clang++ in /opt/rocm, which is what the tools expect. On Fedora, however, the ROCm packages do not do that. By running hipcc --version you can find out where the LLVM tools are, which should be located at /usr/lib64/llvm18/bin.\nWarning\nThe llvm18 part can change. Make sure you check your version first!\nBecause of this, you need to make symbolic links:\n/opt/rocm/llvm/bin/clang to /usr/lib64/llvm18/bin/clang /opt/rocm/llvm/bin/clang++ to /usr/lib64/llvm18/bin/clang++ This can be done with the following snippet:\nsudo mkdir -p /opt/rocm/llvm \u0026amp;\u0026amp; sudo ln -s /usr/lib64/llvm18/bin/clang /opt/rocm/llvm/bin/clang \u0026amp;\u0026amp; sudo ln -s /usr/lib64/llvm18/bin/clang++ /opt/rocm/llvm/bin/clang++ Now you should not be hitting into mysterious snags the way I have, as now there will be an /opt/rocm populated with the libraries and tools that are expected.\nVulkan It is not the end of the world if your GPU is not supported by ROCm, because it still can be supported by Vulkan or CLBlast. Vulkan is the same API that is used to play your favourite games on Steam on Fedora, and it can be used to do AI workloads as well. It is just not nearly as performant as ROCm. However, it is very much an attractive option, and still beats CPU-only inference by orders of magnitude.\nYou will need to install the following packages:\nsudo dnf install mesa-libOpenCL mesa-libOpenCL-devel libclc libclc-devel clinfo Similarly with ROCm, you can verify if your GPU is Vulkan-enabled by running clinfo. If you get a long list (as in the ROCm case above), then it means your GPU is recognised as a valid Vulkan platform. If you don\u0026rsquo;t see much, then it is not supported, but it really should be, unless you have exceptionally old or cheap hardware.\nCLBlast One thing to note is that Vulkan requires your CPU to have the AVX2 extension. This should be present on all modern CPUs, unless, as said, you have exceptionally old or cheap hardware. Should you not have AVX2 on your CPU for whatever reason, CLBlast is one last option that might be supported on your hardware, as it requires AVX instead. From what I understand, you will need the following:\nsudo dnf install clblast clblast-devel Just make sure to select a \u0026ldquo;CLBlast option\u0026rdquo; or \u0026ldquo;OpenCL option,\u0026rdquo; if one exists, whenever you use your AI tool of choice.\nIf your CPU does not even have the AVX extension, then you probably need to upgrade your hardware. However, it is worth nothing that version 1.82.4 of koboldcpp no longer requires AVX for its CLBlast backend, so your toaster can now run it.\nConclusion If this guide has helped at least one person, then my mission is complete. The information contained here took me at least a dozen hours of troubleshooting and frustration to gather \u0026ndash; probably more. The worst part is that some of it is still a bit unsure. My hope is that this page can become a small repository of Fedora-specific knowledge that other Fedora users can use to help each other, since getting AI to work on Fedora can be quite frustrating.\n","permalink":"https://maxwelljensen.eu/posts/ai_on_fedora/","summary":"\u003cp\u003eFedora is an awesome Linux distribution, but what makes it even more awesome is\nthe fact that you can run AI on it fairly easily. That is, if you know how to\nrun it first, which is the hard part. This article goes through some technical\ndetails of getting certain Fedora-specific problems out of the way. Since most\nLinux guides regarding AI cater to Debian-based or Arch-based systems, I have\nfound very little information on how to get some AI tools running on Fedora.\u003c/p\u003e","title":"AI on Fedora"},{"content":"Dynamic websites are websites that generate content on-the-fly, tailored to each user\u0026rsquo;s request. Unlike static websites, which serve the same page every time someone visits, dynamic sites pull data from a database or other sources to create unique pages for each visitor.\nFor example, when you visit a blog powered by WordPress, the site dynamically pulls the latest posts, comments, and user information from its database to display a personalised experience. This ability to change content in real-time is why dynamic websites are used for e-commerce sites, social media platforms, and other websites where user interaction and fresh content are essential.\nHowever, for the vast majority of website concepts on the Internet, there is no need for all of that complexity and dynamic processing. Presumably, you are reading this guide in order to set up a personal blog, or some other simple website to that effect. Consider the following diagram:\nClearly this makes sense for something like Facebook or a phpBB forum, but if you are looking to set up a blog, then this is not the infrastructure to use. Yet WordPress is used for this purpose all the time \u0026ndash; it\u0026rsquo;s not at all necessary.\nOn the other hand, static websites are essentially files (like HTML, CSS, and images) stored on a server. When someone visits the website, their browser requests these files over the Internet and displays them for the user. Since there\u0026rsquo;s no need for server-side processing, static sites load quickly and are straightforward to maintain.\nWhy a static site over something like WordPress? One of the most compelling reasons to choose a static site generator is speed. Unlike dynamic websites, which generate content on-the-fly for each visitor, static sites are already on the server, waiting to be served.\nSecurity is another area where static sites shine. Since static sites don’t rely on server-side processing or databases, they are inherently less vulnerable to security breaches. There’s no login portal for hackers to exploit, and fewer moving parts mean fewer potential points of failure. In contrast, platforms like WordPress require regular updates and maintenance to patch vulnerabilities, which can be time-consuming and technically challenging for those who aren’t familiar with managing servers or databases. There\u0026rsquo;s just more headaches. You got a whole technology to learn, unlike static websites, which are just plain files on your filesystem.\nEfficiency is another key advantage of static site generators. Platforms like WordPress often require expensive hosting solutions with high resource limits. With a static site, you don’t need powerful servers because the heavy lifting is done during the initial build phase.\nSimplicity is another one. Gone are the days of dealing with complicated plugins, themes, and updates that are common with CMS platforms like WordPress. With Hugo, you don’t have to worry about PHP installations, MySQL databases, or server configurations. Instead, you focus on writing content and structuring your site in a way that feels natural to you. As said, it\u0026rsquo;s just files on your filesystem.\nFinally, static sites are often more SEO-friendly than their dynamic counterparts. Search engines love static content because it’s easy to crawl and index. Since there’s no complex code running in the background, your site can load faster and deliver a better user experience, both of which are important factors in search engine rankings. Additionally, many Hugo themes come with built-in SEO optimisations which search engines prefer.\nHow do you have a search bar? As you probably noticed, this website has a search function. Given this information, you might be inclined to think that this website is dynamic. What if I told you that this is not the case. \u0026ldquo;How is this possible?\u0026rdquo; you may ask.\nOn a static website, such as this one, the search function works differently from how it does on a dynamic website like WordPress. Since there\u0026rsquo;s no server involved to process your search query in real-time, the search is handled entirely by JavaScript running in your web browser.\nWhen you load this website, the JavaScript code along with the content and metadata of other pages is already embedded into the webpage. This means that the search functionality doesn\u0026rsquo;t need to send your request to a server; instead, it simply looks through the data stored in the JavaScript files on your local browser. When you type a keyword into the search bar, the JavaScript listens for your input and quickly scans through the stored content and metadata to find matching results. These results are then displayed on your screen without needing any server processing whatsoever. Lastly, this is all handled by the theme that this website implements; no manual work goes into this.\nUsing such creative solutions, it is possible to have features on a static website that are ordinarily found on dynamic websites. All this to say: static websites are far better than dynamic ones.\nNature of this guide In this guide, we will not be going through every single aspect of Hugo, since there\u0026rsquo;s plenty of resources available on this subject. Hugo documentation itself is beginner-friendly enough to be understandable to those who are new to the concept. Instead, we will go through some high-level basics for those who have never used a static web generator before, or even hosted a website before. That way, we can provide an adequate starting point to branch out from \u0026ndash; hopefully.\nIntroduction to Hugo Hugo is one of the most popular free software static site generators available today. It\u0026rsquo;s written in Go (a programming language known for its efficiency) and is very simple to use. Here are some key features:\nWorks on all platforms: Windows, macOS, and Linux. Plenty of themes: Hugo has a large ecosystem. As such, there\u0026rsquo;s many themes to choose from. Template-based design: Uses templates to define how your content will look. This makes it easy to customise themes, if you want to modify one you found, or to make one from scratch. Write in Markdown: Allows you to write content in Markdown, a lightweight markup language that’s easy to learn and use. No need for laggy WYSIWYG WordPress editors or other wheel reinventions. Looks something like the following: # This is a title Some text, and a list of things - List item 1 - List item 2 ## A header With some `code text` Note\nHugo is a command-line interface (CLI) program, which means that you need to interface with it using the terminal. On Windows, you will have to use PowerShell, which is not the same as Windows PowerShell. Command Prompt will not work.\nSetting up Hugo Hugo is a program, so we need to install it. It can be installed in different ways depending on your operating system.\nFor Windows users: Download the Hugo MSI installer from the official Hugo releases page and follow the installation instructions. Alternative ways of installing it may be found here.\nFor macOS users with Homebrew installed: brew install hugo For Ubuntu/Debian users: sudo apt update \u0026amp;\u0026amp; sudo apt install hugo Warning\nHugo in the Debian respository is very outdated. It is recommended to manually install the binary from Hugo\u0026rsquo;s GitHub repository instead.\nFor Fedora users: sudo dnf install hugo Info\nHugo in the Fedora respository is slightly outdated. Some themes might depend on latest version of Hugo to work fully.\nOnce you have installed Hugo on your system, you can verify that it is installed by running hugo version in your terminal, which should give output like the following:\nhugo v0.143.1 linux/amd64 BuildDate=2025-02-04 VendorInfo=gohugoio Fundamentals of Hugo Hugo is one of those brilliantly simple solutions, that is so simple it might be difficult to understand, if one is familiar with all kinds of unnecessary and complex solutions.\nWhen you create a website using Hugo, you\u0026rsquo;re essentially telling it to take your raw content \u0026ndash; text files written in Markdown \u0026ndash; and combine them with templates, which define how your site looks, to build a complete, ready-to-publish website. Unlike platforms like WordPress, where every page is generated dynamically when someone visits your site, Hugo does all the work upfront when you run hugo build.\nBy compiling your site once and serving those static files, Hugo simplifies web development while offering the flexibility to create sophisticated websites. The workflow is always something like the following:\nEdit content Set up your posts, articles, documentation, or whatever in the content directory of your project, using your favourite text editor.\nCompile website Run hugo build, or just hugo, in your project. This process takes about 250 ms.\nDeploy website Deploy files from the public directory, where your complete website is contained, to your hosting service.\nFurther details on the basics of Hugo.\nUnderstanding the directory structure Hugo projects \u0026ndash; sometimes varying very slightly with the theme \u0026ndash; follow a specific folder structure that organises content, assets, and configurations logically.\nconfig.yaml: Configuration file for Hugo, which dictates project-wide functionality and behaviour. Hugo supports YAML, TOML, and JSON formats equally, though the general preference is for YAML. content: Where all your website\u0026rsquo;s content (posts, pages, etc.) reside. Inside are the files you actually edit to modify the content of your website. themes: Contains the theme directories you choose to use. assets: Holds static files that override static theme files, like CSS stylesheets. layouts: Custom template files if needed, which can override theme layouts also. If you have a file here called header.html, and if the theme implements one, then your header.html template will override the theme one. static: Static files for your content. If you have a file here called image.webp, you access it in content by calling /image.webp. public: The default directory where Hugo builds your site for production, but it can be changed with the --destination option. These files are not meant to be edited; they are the complete website. Understanding this structure is necessary in order for the website to compile properly, as Hugo depends on files to be in specific directories and subdirectories. More information on this can be found in the Hugo documentation.\nCreating your first website Let\u0026rsquo;s walk through creating a basic Hugo website, step-by-step.\nInitialise a new Hugo project Open your terminal/PowerShell and navigate to where you want to create your site. Run:\nhugo new site my-site cd my-site Add content Create your first page or post by running:\nhugo new posts/my-first-post.md This creates a Markdown file in the content directory. Open it in a text editor and add your content:\n+++ title = \u0026#34;My First Post\u0026#34; date = 2023-10-01 +++ Hello, World! This is my first Hugo post. The lines surrounded by +++ signs are known in Hugo as front matter. They contain metadata, define how a specific page should behave, and other things that might be relevant on a page-by-page basis.\nSelect and install a theme Most themes are hosted on GitHub, but you can find most of them here on Hugo\u0026rsquo;s website. Once you find one you like, use the links on the website to navigate to the theme\u0026rsquo;s repository and download it. You can either clone the repository using Git or download the ZIP file directly.\nDownload and place a theme in your themes directory. For example:\nmkdir -p themes/hugo-theme-bootstrap cp -R /path/to/theme/files/* themes/hugo-theme-bootstrap/ Update config.yaml:\ntheme: \u0026#34;hugo-theme-bootstrap\u0026#34; A lot of themes offer additional configuration options, such as colors or layout settings. Refer to the theme\u0026rsquo;s documentation for any specific requirements.\nBuild and serve the site In your terminal, run:\nhugo server This starts a local web server. Visit http://localhost:1313 to see your site. Or, if you used --bind=0.0.0.0, you can access it from other devices on your network. The site will recompile and show changes whenever you make changes to the files. This makes iterating upon the website very quick and easy.\nCustomise your site Modify the configuration files, add your own CSS/JS, or create additional content as needed.\nThe config.yaml (or .toml) file is where you set global preferences for your site:\nYAML title: \u0026#34;My Hugo Website\u0026#34; description: \u0026#34;A beautiful static website built with Hugo.\u0026#34; author: \u0026#34;John Doe\u0026#34; baseURL: \u0026#34;https://mywebsite.com/\u0026#34; languageCode: \u0026#34;en-us\u0026#34; timezone: \u0026#34;UTC\u0026#34; TOML title = \u0026#34;My Hugo Website\u0026#34; description = \u0026#34;A beautiful static website built with Hugo.\u0026#34; author = \u0026#34;John Doe\u0026#34; baseURL = \u0026#34;https://mywebsite.com/\u0026#34; languageCode = \u0026#34;en-us\u0026#34; timezone = \u0026#34;UTC\u0026#34; You can also configure settings like Disqus, social media links, etc., depending on the theme\u0026rsquo;s capabilities. More on project configuration here.\nUnless you are very unfamiliar with the CLI, in which case you may not be able to fully comprehend the above steps, you should have a fully functional website after following these steps.\nHugo\u0026rsquo;s documentation has a page on how to host on GitHub Pages. It is entirely free of charge, but you might also consider hosting fully independently like a landchad.\nWorking with templates What we covered is just the tip of the iceberg. Should you want to modify an existing theme, or even make a new one from scratch: Hugo uses Go templating language to help automate compiling content. You can modify templates in the theme directory or create custom layouts in your project\u0026rsquo;s layouts folder.\nFor example, to add a custom header:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;header\u0026gt; \u0026lt;nav\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ .Site baseURL }}\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ .Site baseURL }}/about\u0026#34;\u0026gt;About\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;/header\u0026gt; {{ .Content }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; More on this in Hugo\u0026rsquo;s documentation.\nAdding Custom CSS/JavaScript You can add custom styles and scripts by placing them in your theme\u0026rsquo;s assets directory or within your project\u0026rsquo;s assets folder. For example:\nPlace your custom.css in themes/your-theme/assets/css/. Include it in your layout template: \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{ .themePath }}assets/css/custom.css\u0026#34;\u0026gt; Similarly, for JavaScript files: \u0026lt;script src=\u0026#34;{{ .themePath }}assets/js/custom.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; ","permalink":"https://maxwelljensen.eu/posts/websites_for_beginners/","summary":"\u003cp\u003eDynamic websites are websites that generate content on-the-fly, tailored to\neach user\u0026rsquo;s request. Unlike static websites, which serve the same page every\ntime someone visits, dynamic sites pull data from a database or other sources\nto create unique pages for each visitor.\u003c/p\u003e\n\u003cp\u003eFor example, when you visit a blog powered by WordPress, the site dynamically\npulls the latest posts, comments, and user information from its database to\ndisplay a personalised experience. This ability to change content in real-time\nis why dynamic websites are used for e-commerce sites, social media platforms,\nand other websites where user interaction and fresh content are essential.\u003c/p\u003e","title":"Creating a Website"},{"content":"The most fundamental, yet seriously overlooked aspect of any software is licensing. Whether we like it or not, the fact is that anything we create or want to use is subject to copyright. Worst of all, legal illiteracy is a major issue in the free software sphere.\nThe amount of developers who do not understand licensing is staggering, and it has serious consequences; a lot of corporate exploitation. Developers after developers keep getting tricked.\nWarning\nTHIS ARTICLE IS NOT LEGAL ADVICE. I am not a lawyer, neither former nor currently practising. If you are uncertain about this topic, and valuable assets are at stake, come into contact with qualified legal counsel.\nCopyright The basis of licensing is copyright. If you wish to understand licensing, you need to understand the basics of copyright law. What is copyright? Encyclopedia Britannica defines it as follows:\ncopyright, the exclusive, legally secured right to reproduce, distribute, and perform a literary, musical, dramatic, or artistic work.\nNow commonly subsumed under the broader category of legal regulations known as intellectual-property law, copyright is designed primarily to protect an artist, a publisher, or another owner against specific unauthorized uses of his work (e.g., reproducing the work in any material form, publishing it, performing it in public, filming it, broadcasting it, or making an adaptation of it).\nIn summary, the goal of copyright is to protect the author of a work. The person who owns the copyright is called a copyright holder.\nHow is copyright established and put into effect? Historically, centuries ago, this used to vary by national jurisdiction. It was not guaranteed that a book author would have his creative work of art protected in every country. Today, however, most nations on the planet, including North Korea, are signatories of the International Convention for the Protection of Literary and Artistic Works, or Berne Convention for short. Signatories of the Berne Convention constitute the Berne Copyright Union, which as of 2025 totals 181 nations.\nThe practical effect of the Berne Convention for the normal person is that the strictest possible copyright protection applies, by default, to any creative work they create. This means that if you write a book in USA, Germany, China, or any other of the Berne Copyright Union countries, all rights of the work are reserved to you, and nobody is legally allowed to derive from or distribute your work. This applies to software, musical composition, or any other work that the local jurisdiction considers \u0026ldquo;creative\u0026rdquo;. Violating copyright is called copyright infringement.\nThere exists an unfortunate but widespread pop myth: that lack of monetisation of derivative copyrighted work makes you immune to legal prosecution. This is wrong. It is still copyright infringement. If you create \u0026ldquo;fan art\u0026rdquo; of Warhammer 40,000 or Star Wars, not taking money for the work has no legal impact. Warhammer 40,000 and Star Wars are copyright of Games Workshop and Disney, respectively, and you are legally obliged to ask for permission from these copyright holders if you may create derivative work of their work. The only reason why \u0026ldquo;fan communities\u0026rdquo; of popular media franchises are allowed to operate is because they are a net benefit to the copyright holders. Fans create hype, and so it is sound business to let their copyright infringement slide. This strange symbiotic relationship has an unfortunate effect of distorting people\u0026rsquo;s understanding of copyright law.\nLicensing As you might imagine, reserving all rights for copyright to yourself is good, but it is not very useful without allowing others to see and maybe even distribute the work, in exchange for financial benefit to you. This is where licensing comes in. It allows us to make our project useful on GitHub, GitLab, Gitea, or any other git repository where others can pull the project and commit changes to it.\nAlthough film theatres do not own the copyright of Star Wars, they are still allowed to screen films, at least for a time, from the Star Wars franchise. This is because Disney is giving film theatre companies the licence to play the films. Usually this comes at a fee. Usually licences come with many terms that dictate what the licensee is allowed to do with licensed work. In this way, Disney allows the general public \u0026ndash; in a controlled way \u0026ndash; to consume their copyrighted work. Disney might stipulate that the latest Star Wars film shall be in theatres for only six months, or most of any other stipulation, as long as it is legally enforceable and not in violation of contract law.\nSoftware As explained earlier, when you create a work, all rights are automatically reserved to you, per Berne Convention. This includes software. Nobody is allowed to use your software without your explicit permission when you first create it. Licensing is a legal avenue of providing permission to others of when and how they may use your software. Therefore it is essential that you understand how to select and employ a licence for your program that makes it free.\nBefore we get to that, we should look at one last thing: free software versus proprietary software. Encyclopedia Britannica defines free software as follows:\nfree software, principle supporting the freedom of users to fully control their software. Software is considered “free” if it is offered by a developer without legal restriction against its study, redistribution, modification, or redistribution in modified form.\nThe promotion and propagation of free software is the chief aim of the free-software movement. The movement began in 1983, when programmer Richard Stallman announced his intention to create a free-software operating system named the GNU Project. Stallman went on to launch the Free Software Foundation (FSF) in 1985, an organization that remains a leading voice in the movement today.\nNote\nDisambiguation: \u0026ldquo;Open source\u0026rdquo; is often used as a synonym for free software, which is incorrect. To learn more, read \u0026ldquo;Why Open Source Misses the Point of Free Software\u0026rdquo; by Richard Stallman.\nNote\nThe word \u0026ldquo;free\u0026rdquo; in this context means freedom, not absence of price. When we talk about free software, we talk about software that respects freedom of the individual, for fair competition and transparency. The English language just has an unfortunate limitation, where the word \u0026ldquo;free\u0026rdquo; can mean two things. Often, in other languages, there is a difference between something being free and something being gratis.\nThe question of free software and proprietary software continues to cause controversy in the tech world. Proponents of free software claim that copyright law is outdated, and not fit for modern demands.\nNow, this page might read less like documentation and more like an essay on a blog, but we need to understand that law is not an exact science. At the same time, it is very much important when developing software. Therefore, we will have to get through some essay-like material before arriving at a conclusion that satisfies the technically minded.\nProprietary software Software that is proprietary, or closed source, cannot be modified and freely distributed. This is the most common type of software, since it is in line with the traditional ways of copyrighted work: reserving most of all rights, allowing access only for direct financial benefit.\nThis is understandable, but at the same time it poses philosophical and ethical questions. To take the most obvious example: Windows is the most widely used proprietary software on the planet. If you have Windows 10 installed on your computer, do you know what your computer is doing at any given time? No, because you do not have access to the source code of Windows 10. It is also doing not very good things, as illustrated by Edward Snowden, who exposed PRISM. Microsoft and many other large US-based tech companies forward information about you to the US federal government\u0026rsquo;s National Security Agency, or other intelligence agencies in the west. To many people that came as a shock, but to most proponents of free software it was exactly to be expected. Free software proponents are deeply distrustful of proprietary software for this reason, and many other reasons.\nThese concerns are entirely unique to software. Copyright law is on the side of Microsoft in spying on its users and even sending data to intelligence agencies without their consent. Songs, books, prose, newspapers, paintings, sculptures, and so on cannot spy on you. This is why the issue of software licensing is not just legally complicated, but also philosophically complex.\nFree software In contrast, free source software is software that can be freely modified and distributed by its users. You are entitled to view the source of the program, modify it, and distribute it however you desire, without restriction. Otherwise it is not considered free software.\nCompare this to proprietary software, which most of us understand intuitively, as part of growing up in an industrialised western society. You make a thing, you own it, and you are the sole proprietor of the thing. Private ownership is essential for a functional society, but this does not work with software. Depending on who you are, the reason might be confusing. In case you struggle with understanding why software should absolutely be free without any exceptions, it is recommended to read \u0026ldquo;Why Software Should Not Have Owners\u0026rdquo; by Richard Stallman.\nThis raises an obvious question: why make your software free? There are many reasons for why it is beneficial, even if it\u0026rsquo;s not immediately obvious why.\nYou don\u0026rsquo;t have to do everything yourself. Volunteer programmers will contribute to a free software project in exchange for absolutely nothing. Their sole incentive is seeing a project come to life that they think will benefit not just them but also others. It also tests their skill as a programmer, and allows them further work opportunities. Free software facilitates security. All serious private people, companies, and institutions that have need for cryptographic solutions will use only free software solutions. USA\u0026rsquo;s National Security Agency uses the Advanced Encryption Standard, or AES, to encrypt secret and top secret documents in the government. AES is open to the general public. Anybody is free to review and test AES for security errors. AES is therefore one of the safest cryptographic solutions in existence, as the entire planet has looked at the code and no errors have been found. Free software can be monetised. Common misconception of free software is that free software cannot be monetised. This is false. It is entirely possible to make software free, but ask for money in exchange for it. There are already a few major projects where this is done. DOOM: The code base of the game is free, but the art assets are still copyrighted and not free (both in price and freedom). You still have to pay for the art assets, in other words. Mindustry: The game is free, but you may purchase a licence of the game on Steam for additional features. Zrhythm: Free, but the executable files have to be paid for. This means that if you are sufficiently tech-savvy, you can simply compile the executable files yourself, and you skip the costs. Free software protects end-user rights. In most cases one is forced to use, and be dependent on, a producer\u0026rsquo;s continual support for a purchased product. For instance, if one purchases a Mercedes-Benz, it is likely that one will be forced to drive to the nearest Mercedes-Benz workshop if something breaks in the car. With free software, the end-user does not have just the possibility to solve software errors on their own, but also see if the software does exactly what it is supposed to do. With proprietary software this is usually impossible to verify. If something is wrong with proprietary software, you are at the mercy of the company behind the software. These are just some of the reasons why free software proponents choose to make their software free. You simply have to explore GitHub. It is the largest website for free software.\nFree software licences Contrary to proprietary licences, free software licences allow conditional access to the source code for everyone. Free software licences are applicable to all forms of media, but are typically used for software. The European Union maintains an interactive list of the various known free software licences. Here is a curated list of the three best licences that preserve the rights of both the author and end-users of their software:\nGNU General Public License v3 (GPL-3.0) Can: Use/reproduce, Distribute, Modify/merge, Commercial use, Use patents, Place warranty Must: Incl. Copyright, State changes, Disclose source, Copyleft/Share a., Include licence European Union Public Licence 1.2 (EUPL-1.2) Can: Use/reproduce, Distribute, Modify/merge, Commercial use, Use patents, Place warranty Must: Incl. Copyright, Royalty free, State changes, Disclose source, Copyleft/Share a., SaaS/network, Include licence Mozilla Public License 2.0 (MPL-2.0) Can: Use/reproduce, Distribute, Modify/merge, Commercial use, Use patents, Place warranty Must: Incl. Copyright, Disclose source, Copyleft/Share a., Lesser copyleft, Include licence There are a few legally acknowledged, or \u0026ldquo;correct,\u0026rdquo; ways of licensing a program. To learn more about that, read this. Information on that page is applicable to any other licence you use for software. If you follow the directions, your software should be legally protected. Make your licence as easily visible as possible, so that both end-users and abusers understand that your rights are protected.\nSoftware and present copyright law If you do not care about the particulars of licensing, and want to secure your software, using the licences mentioned above is enough. Otherwise, there are important issues to be known with how licensing of software works with today\u0026rsquo;s copyright law. As mentioned earlier, software is unusual as a medium, and copyright law was not designed to fairly process it \u0026ndash; fairly for the consumer, anyway.\nThe key to understanding free software licences is that they are an ugly jury-rig. A hack, if you will, of copyright law. It glues together modern demands of software and the Internet with old, rigid, outdated legislation from over one hundred years in the past. Here\u0026rsquo;s what that means:\nTechnically, the copyright holder of the Linux kernel is still Linus Torvalds. However, he, through the GNU General Public License 2.0 (GPL-2.0), allows conditional access to the kernel code. The biggest condition of the licence is that a person, who redistributes or performs a modification on the kernel, has to license his distribution or modification under the GPL-2.0 licence. In this way, all derivative versions of the kernel become licensed under the licence, because it is itself a licence term. This \u0026ldquo;legal virality\u0026rdquo; is how the kernel is legally protected, and retains its protection across all modifications. Where does Linus Torvalds as a copyright holder fit in this? That\u0026rsquo;s the thing: he doesn\u0026rsquo;t, at least not in any serious capacity. Him being a copyright holder is irrelevant, because the licence terms do not give him any special treatment. There is no clause that allows him to revoke licensed access to the kernel. The kernel is going to be free, forever.\nYet, he is required to be a copyright holder, because legally the copyright holder cannot be \u0026ldquo;nobody\u0026rdquo;. It\u0026rsquo;s simply a legal concept that does not exist in copyright law, as there was never a time in history where that was useful for any scenario.\nIdiotic licensing Not all licences are created equal, and you should be wary of certain ones. GPL-3.0, EUPL-1.2, and MPL-2.0 are the best, as they secure the largest amount of rights for both the author and the author\u0026rsquo;s end-users. There are, however, licences that do none of these things. Here\u0026rsquo;s a few of them, but the list is by no means exhaustive:\nApache License, Version 2.0 BSD Zero Clause License BSD 2-Clause \u0026ldquo;Simplified\u0026rdquo; License BSD 3-Clause Clear License MIT License What is wrong with these licences? The issue is rather simple: the terms of these licences do not include that all modifications of the software fall under terms of the same licence. What this means is that if one were to for instance take code licensed under MIT License, and perform modifications on it, one would be allowed to apply all modifications under any licence; regardless of whether they\u0026rsquo;re proprietary or not. This is what\u0026rsquo;s called a permissive licence, or idiotic licence, because it misses the entire point of making a software\u0026rsquo;s source open to begin with. Put another way, they are simply not free software. They do not fit the definition of free software.\nTo underline how catastrophically useless an idiotic licence can be, one should look no further than the story of Andrew Tanenbaum and his MINIX venture. MINIX is an operating system, and was licensed under some form of BSD licence and, to Tanenbaum\u0026rsquo;s utter obliviousness, was used by Intel in their Management Engine. The Management Engine, or ME for short, is a micro operating system that runs on any modern Intel CPU. Nobody knows what it does, and theoretically can be used by governments or sufficiently savvy hackers to steal cryptographic keys, or do other nefarious things no sane person would consent to. Intel was entirely justified in appropriating MINIX to build ME from. None of the terms in the BSD licence force Intel to reveal source, its modifications, or even license modifications under the same licence. Tanenbaum did not even know that MINIX was used for this purpose until several years after the fact.\nTanenbaum has been in personal conflict on this issue, since he got to know that MINIX is now world\u0026rsquo;s leading spyware. He regrets choosing an idiotic licence to license his software, but occasionally copes with the catastrophic, ill-advised decision as being inevitable:\nMany people (including me) don\u0026rsquo;t like the idea of an all-powerful management engine in there at all (since it is a possible security hole and a dangerous idea in the first place), but that is Intel\u0026rsquo;s business decision and a separate issue from the code it runs. A company as big as Intel could obviously write its own OS if it had to.\n–\u0026ndash; Andrew Tanenbaum\nTanenbaum is correct in that Intel would, at some point, write their own operating system to become hardware-level spyware on all of their products, but it doesn\u0026rsquo;t change the fact that one person is responsible for the origin of ME: Tanenbaum. If MINIX had been licensed under, for example, GPL-3.0, Intel would have been forced to disclose source code of ME, all of its modifications, reveal Tanenbaum as the copyright holder, and many other important conditions. If Intel did not wish to face this immense legal liability, they would have been forced to spend their own cash, time, and manpower to develop a new, proprietary alternative. It would have been a lot of money, but, because of Tanenbaum, they were spared all of that. Very cool, Tanenbaum.\nAll in all, everyone who develops any kind of software has to avoid idiotic licences. MIT Licence is the most commonly used licence, which should speak for itself of how serious legal illiteracy is in software engineering. Do not make the same mistake, and pick an appropriate licence for your work.\n","permalink":"https://maxwelljensen.eu/posts/licensing_for_beginners/","summary":"\u003cp\u003eThe most fundamental, yet seriously overlooked aspect of any software is\nlicensing. Whether we like it or not, the fact is that anything we create or\nwant to use is subject to copyright. Worst of all, legal illiteracy is a major\nissue in the free software sphere.\u003c/p\u003e\n\u003cp\u003eThe amount of developers who do not understand licensing is staggering, and it\nhas serious consequences; a lot of corporate exploitation. Developers after\ndevelopers keep getting tricked.\u003c/p\u003e","title":"Licensing for Beginners"}]